@page "/empresa/cadastro"
@namespace BlazorInputMask.Pages
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment env
@implements IAsyncDisposable
@using Newtonsoft.Json
@inject EmpresaController _empresaController
@inject EstadosController _controleEstado
@inject CidadesController _controleCidade
@rendermode InteractiveServer


<h2><b>Cadastro de Empresas</b></h2>
<h4>Cadastre uma empresa e mantenha seus dados atualizados</h4>

<EditForm Model="@empresa" OnValidSubmit="@Cadastrar" method="post" FormName="cad_empresa">
    <ObjectGraphDataAnnotationsValidator/>
    <hr />

    <!--Inicio do div dos forms e da imagem-->
    <div class="input-group">
        <!--Inicio do div dos forms-->
        <div class="col-md-10">
            <!--Inicio do div dos imputs CPF e nome-->
            <div class="input-group col-md-12">
                <div class="form-group col-md-3">
                    <label>CNPJ: *</label>
                    <!--<div class="col-sm-2">-->
                    <InputText id="cnpjCliente" class="form-control" placeholder="00.000.000/00000-00" @bind-Value="empresa.Cnpj" />
                    @if (empresa.Cnpj != null)
                    {
                        @if (empresa.Cnpj.Length >= 17)
                        {
                            this.Existe();
                            <ValidationMessage For="()=>empresa.Cnpj" />
                        }
                    }
                </div>
                &nbsp
                <div class="form-group col-md-1">
                    <br />
                    <button style="z-index:0;" type="button" class="btn btn-secondary" @onclick='BuscarCNPJ'>
                        <i class="bi bi-search"></i>
                    </button>
                </div>
                &nbsp
                <div class="form-group col-md-3">
                    <label>Razão Social: *</label>
                    <InputText type="text" class="form-control" @bind-Value="empresa.Razao_social" />
                </div>
                &nbsp  &nbsp &nbsp &nbsp
                <div class="form-group col-md-4">
                    <label>Nome Fantasia: </label>
                    <InputText type="text" class="form-control" @bind-Value="empresa.Nome_fantasia" />
                </div>
            </div><!--Fim do div dos imputs CPF e nome-->
            <br />
            
            <div class="input-group col-md-12">
                <div class="form-group col-md-2">
                    <label>Incrição Estadual: </label>
                    <InputText id="rg" @bind-Value="empresa.InscricaoEstadual" class="form-control" />
                </div>
                &nbsp  &nbsp  &nbsp
                <div class="form-group col-md-3">
                    <label>Atividade Econômica: *</label>
                    <InputText id="orgaoEmirssor" @bind-Value="empresa.AtividadeEconomica" class="form-control" />
                </div>
                &nbsp   &nbsp
                <div class="form-group col-md-3">
                    <label>Situação: </label>
                    <InputSelect @bind-Value="empresa.Situacao_cadastral" class="form-select">
                        <option value="">--Selecionar--</option>
                        <option value="ativada">Ativada</option>
                        <option value="desativada">Desativada</option>
                    </InputSelect>
                </div>
                &nbsp  &nbsp
                <div class="form-group col-md-3">
                    <label>Responsável: </label>
                    <InputText id="dataNasc" @bind-Value="empresa.Responsavel" class="form-control" />
                </div>


            </div>
        </div><!--Fim do div dos forms-->
        <div>
            <div class="form-group col-md-2">
                <div class="imageContainer">
                    <img id='imgCliente' @onclick="@FotoCarregarr" src="@imagem" width="120px" height="120px" />
                </div>
                <InputFile type="file" OnChange="LoadFiles" id="fImage" accept="image/png, image/jpeg, image/gif" />
            </div>
        </div>
    </div><!--Fim do div dos forms e da imagem-->

    <hr />
    <div class="row">
        <div class="form-group col-md-2">
            <label> CEP: *</label>
            <InputText id="cep" @bind-Value="empresa!.Endereco.Cep" class="form-control" />
        </div>
        <div class="form-group col-md-1">
            <br />
            <button type="button" class="btn btn-secondary" @onclick='BuscarLocalidade'>
                <!--Implementar a busca de localidade!-->
                <i class="bi bi-search"></i>
            </button>
        </div>
        <div class="form-group col-md-6">
            <label> Logradouro: *</label>
            <InputText id="logradouro" @bind-Value="empresa.Endereco.Logradouro" class="form-control" />
        </div>
        <div class="form-group col-md-3">
            <label> Número: *</label>
            <InputText id="numero" @bind-Value="empresa.Endereco.Numero" class="form-control" />
        </div>
    </div>
    <br />


    <div class="row">
        <div class="form-group col-md-4">
            <label>Bairro: *</label>
            <InputText id="bairro" @bind-Value="empresa.Endereco.Bairro" class="form-control" />
        </div>
        <div class="form-group col-md-4">
            <label> Estado: </label>
            <InputSelect @bind-Value="id_estadoSelecionado" @onblur="@SelecionarCidades" class="form-select">
                <!--Preencher do banco posteriormente-->
                <option value="0">--Selecionar--</option>
                @if (estadosList == null)
                {

                }
                else
                {
                    @foreach (Estado e in estadosList)
                    {
                        <option value="@e.Id_estado"> @e.Uf_est </option>
                    }
                }

            </InputSelect>
        </div>
        <div class="form-group col-md-4">
            <label> Cidade: *</label>
            <InputSelect @bind-Value="empresa.Endereco.Fk_id_cidades" class="form-select">
                <!--Preencher do banco posteriormente-->
                <option value="0">--Selecionar--</option>
                @if (cidadesList == null)
                {
                    <option value="0"> nenhuma cidade </option>
                }
                else
                {
                    @foreach (Cidade cid in cidadesCelecionadas)
                    {
                        <option value="@cid.Id_cidade"> @cid.Nome_cid </option>
                    }
                }
            </InputSelect>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="form-group col-md-4">
            <label>Contato 1: *</label>
            <InputText id="celularTel" @bind-Value="empresa.Telefone1" class="form-control" />
        </div>
        <div class="form-group col-md-4">
            <label>Contato 2: </label>
            <InputText id="celTrabalho" @bind-Value="empresa.Telefone2" class="form-control" />
        </div>
        <div class="form-group col-md-4">
            <label>Contato 3: </label>
            <InputText id="telCasa" @bind-Value="empresa.Telefone_fax" class="form-control" />
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="form-group col-md-6">
            <label>Email 1 *: </label>
            <InputText type="email" id="emailPessoal" @bind-Value="empresa.Email" class="form-control" />
        </div>

        <div class="form-group col-md-6">
            <label>Email 2: </label>
            <InputText type="email" id="emailProfissional" @bind-Value="empresa.Email2" class="form-control" />
        </div>
    </div>

    <br />
    <div class="form-group">
        <a href="/empresas">
            <button type="button" class="btn btn-danger bi bi-searche">
                Voltar &nbsp <i class="bi bi-arrow-left-circle"></i>
            </button>
        </a>
        <div class="float-end">
            <button type="submit" class="btn btn-success create">
                Salvar &nbsp <i class="fa fa-save"></i>
            </button>
        </div>
    </div>
    <br />
    <br />
</EditForm>




@code {
    int id_estadoSelecionado;
    //Cidade cidadeSelecionada;
    string imagem = "imagensClientes/camera.png";
    IReadOnlyList<IBrowserFile>? arquivoSelecionados = null;


    private Empresa empresa = new Empresa();


    List<Estado> estadosList { get; set; }
    List<Cidade> cidadesList { get; set; }
    List<Cidade> cidadesCelecionadas { get; set; }

    string mensagem = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {

            //cidadeSelecionada = new Cidade();
            estadosList = await _controleEstado.listarTodosawait();
            cidadesList = _controleCidade.listarTodos();
            cidadesCelecionadas = cidadesList;
        }
        catch (Exception ex)
        {
            statusMensagem.ShowModal("Erro", "Erro ao carregar a página da empresa " + ex.Message);
        }

    }

    private async Task SelecionarCidades()
    {
        if (id_estadoSelecionado != 0)
        {
            cidadesCelecionadas = cidadesList.Where(x => x.Estado.Id_estado == id_estadoSelecionado).ToList();
        }
        else
        {
            cidadesCelecionadas = cidadesList;
        }

    }

    private void Cadastrar()
    {
        mensagem = "";
        try
        {
            empresa.Foto = imagem;
            empresa.Endereco.Cidade = cidadesList.First(x => x.Id_cidade == empresa.Endereco.Cidade.Id_cidade);
            _empresaController.Salvar(empresa);
            mensagem = "Empresa cadastrado com sucesso!";
            JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
        }
        catch (Exception ex)
        {
            //mensagem = endereco.Logradouro;
            mensagem = "Erro " + ex.Message;
            JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
        }

    }



    private async Task Existe()
    {

        Empresa CNPJ = await _empresaController.BuscarCNPJ(empresa.Cnpj);
        if (CNPJ.Id_empresa != null)
        {
            NavigationManager.NavigateTo("empresa/editar/" + CNPJ.Id_empresa);
        }

    }



    private void ChangeValue(ChangeEventArgs changeEventArgs)
    {
        //BuscarLocalidade();
    }

    private async Task BuscarCNPJ()
    {
        try
        {
            if (empresa.Cnpj != null && empresa.Cnpj.Length >= 13)
            {
                string cnpjS = empresa.Cnpj.Replace("-", "").Replace(".", "").Replace("/", "");
                string url = "https://api.cnpjs.dev/v1/" + cnpjS;
                using (var httpCliente = new HttpClient())
                {
                    HttpResponseMessage resposta = await httpCliente.GetAsync(url);
                    string json = await resposta.Content.ReadAsStringAsync();
                    var r = JsonConvert.DeserializeObject<Empresa>(json);

                    if (r.Razao_social != null)
                    {
                        this.empresa.Razao_social = r.Razao_social;
                        this.empresa.Nome_fantasia = r.Nome_fantasia;
                        this.empresa.Situacao_cadastral = r.Situacao_cadastral;

                        this.empresa.Email = r.Email;
                        this.empresa.Telefone1 = r.Telefone1.Insert(0, "(").Insert(3, ")").Insert(4, "9");
                        this.empresa.Telefone2 = r.Telefone2.Insert(0, "(").Insert(3, ")").Insert(4, "9");
                        this.empresa.Telefone_fax = r.Telefone_fax.Insert(0, "(").Insert(3, ")").Insert(4, "9");

                        this.empresa.Endereco.Cep = r.Endereco.Cep.Insert(5, "-");
                        this.empresa.Endereco.Numero = r.Endereco.Numero;
                        this.empresa.Endereco.Bairro = r.Endereco.Bairro;
                        this.empresa.Endereco.Logradouro = r.Endereco.Logradouro;

                        Cidade c = cidadesList.FirstOrDefault(x => x.Nome_cid.ToUpper() == r.Endereco.Municipio.ToUpper());
                        if (c != null)
                        {
                            this.empresa.Endereco.Cidade = c;
                            this.empresa.Endereco.Fk_id_cidades = this.empresa.Endereco.Cidade.Id_cidade;
                        }
                        else
                        {
                            BuscarLocalidade();
                        }
                        Estado e = estadosList.FirstOrDefault(x => x.Uf_est == r.Endereco.Uf);
                        if (e != null)
                        {
                            id_estadoSelecionado = e.Id_estado;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    private async Task BuscarLocalidade()
    {
        if (empresa.Endereco.Cep != null && empresa.Endereco.Cep.Length >= 7)
        {
            try
            {
                string cepp = empresa.Endereco.Cep.Replace("-", "");
                Endereco informacoesCep = new Endereco();
                string url = "https://viacep.com.br/ws/" + cepp + "/json";

                HttpResponseMessage resposta = await http.GetAsync(url);
                string json = await resposta.Content.ReadAsStringAsync();
                informacoesCep = JsonConvert.DeserializeObject<Endereco>(json);

                empresa.Endereco.Logradouro = informacoesCep.Logradouro;
                empresa.Endereco.Bairro = informacoesCep.Bairro;
                Cidade c = cidadesList.FirstOrDefault(x => x.Nome_cid == informacoesCep.Localidade);
                if (c != null)
                {
                    empresa.Endereco.Fk_id_cidades = c.Id_cidade;
                }
                Estado e = estadosList.FirstOrDefault(x => x.Uf_est == informacoesCep.Uf);
                if (e != null)
                {
                    id_estadoSelecionado = e.Id_estado;
                }

            }
            catch (Exception ex)
            {
                mensagem = "Erro ao buscar a localidade " + ex.Message;

            }
        }

    }

    void Cancel()
    {
        NavigationManager.NavigateTo("empresas");
    }

    private void fecharModal(string elementoID)
    {
        empresa = new Empresa();
        JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", elementoID);
    }

    private IJSObjectReference? jsModule;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeAsync<string>("mascaraCNPJ.masksCNPJ", null);
                await JSRuntime.InvokeAsync<string>("masksTel.mascaratel", null);
                await JSRuntime.InvokeAsync<string>("masksCep.mascaraCep", null);
                await JSRuntime.InvokeAsync<string>("masksTelCasa.mascaratelCasa", null);
                await JSRuntime.InvokeAsync<string>("masksTelTra.mascaratelTra", null);
                await JSRuntime.InvokeAsync<string>("masksCep.mascaraCep", null);
            }
            catch (Exception ex)
            {
                mensagem = "Erro ao carregar as máscaras " + ex.Message;
                //await JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
            }

        }
    }



    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        arquivoSelecionados = e.GetMultipleFiles();
        try
        {
            foreach (var file in arquivoSelecionados)
            {
                if (empresa.Cnpj != null)
                {
                    string nomeFoto = empresa.Cnpj.Replace("-", "").Replace(".", "").Replace("/", "");
                    long maxFileSize = 1024 * 1024 * 2000;
                    Stream stream = file.OpenReadStream(maxFileSize);
                    var extensao = Path.GetExtension(file.Name);
                    var path = $"{env.WebRootPath}/imagens/empresas/{nomeFoto}{extensao}";
                    FileStream fs = File.Create(path);
                    await stream.CopyToAsync(fs);
                    imagem = $"imagens/empresas/{nomeFoto}{extensao}";
                    stream.Close();
                    fs.Close();

                }
            }
        }
        catch (Exception ex)
        {
            imagem = ex.Message;
        }

    }

    private async void FotoCarregarr()
    {
        if (empresa.Cnpj != null)
        {
            await JSRuntime.InvokeAsync<string>("uploadImg.fotoCarregar", null);
        }
        else
        {
            await JSRuntime.InvokeAsync<string>("focos.focusById", "cnpjCliente");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }
    protected StatusMensagem statusMensagem = new StatusMensagem();
    protected void ConfirmarMensagem(bool confirm) { }
}

<StatusMensagem @ref="statusMensagem" UserChouse="ConfirmarMensagem" />

<!--Código responsável por exibir o modal de confirmação de cadastro ou de erro.-->

<div class="modal fade show" id="myModal" style="display:none; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cadastro!</h5>
            </div>
            <div class="modal-body">
                <p>@mensagem</p>
            </div>
            <div class="modal-footer">
                <a href="empresas"><button type="button" class="btn btn-primary">Voltar a lista</button></a>
                <button type="button" class="btn btn-primary" @onclick='eventArgs=>fecharModal("myModal")'>Novo</button>
            </div>
        </div>
    </div>
</div>
