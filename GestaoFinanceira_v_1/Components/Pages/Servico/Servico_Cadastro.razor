@page "/servico/cadastro"

@using System.Globalization;
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment env
@implements IAsyncDisposable
@inject ServicoController _servicoController
@rendermode InteractiveServer
@attribute [Authorize]

<h2><b>Cadastro de Serviços</b></h2>
<h4>Cadastre um novo serviço e mantenha seus dados atualizados</h4>
<EditForm Model="servico" method="post" OnValidSubmit="Cadastrar" FormName="form_servico">
	<DataAnnotationsValidator />
	<hr />

	
        <div class="row">
            <div class="form-group col-md-8">
                <label>Nome: *</label>
                <InputText type="text" placeholder="" class="form-control" @bind-Value="servico.Nome_ser" />
            </div>
            
        </div>
        <br />

		<div class="row">
            <div class="form-group col-md-2">
                <label>Valor Estimado: *</label>
            <InputText onkeyup="moedaFormat(this);" id="valorEstimado" placeholder=" Ex. R$ 100,00"
                       @bind-Value="ValorServico" class="form-control" />
            </div>
  
            <div class="form-group col-md-2">
                <label>Tempo Estimado: </label>
            
            <InputText id="tempoEstimado" placeholder="" @bind-Value="servico.TempoEstimado_ser" class="form-control" />
            
        </div>
   
            <div class="form-group col-md-2">
                <label>Garantia: </label>
                <InputText id="garantia" placeholder=""  @bind-Value="servico.Garantia_ser" class="form-control" />
            </div>
     
            <div class="form-group col-md-2">
                <label>Tipo</label>
                <InputSelect @bind-Value="servico.Tipo_ser" class="form-select">
                    <option value="">--Selecionar--</option>
                    <option value="transferencia">Transferência</option>
                    <option value="cautelar">Cautelar</option>
                    <option value="emplacamento">Emplacamento</option>
                </InputSelect>
            </div>
		</div>


    <br />
    <div class="form-group col-md-8">
        <a href="/servicos">
            <button type="button" class="btn btn-danger bi bi-searche">
                Voltar &nbsp <i class="bi bi-arrow-left-circle"></i>
            </button>
        </a>
        <div class="float-end">
            <button type="submit" class="btn btn-success create">
                Salvar &nbsp <i class="fa fa-save"></i>
            </button>
        </div>
        <!--<input type="submit" value="Cadastrar"  class="btn btn-success create bi bi-search"/>-->
    </div>
    <br />
    <br />
</EditForm>



@code {
    string mensagem = "";

    private string ValorServico = "0";

    private Servico servico = new Servico();
    private IJSObjectReference? jsModule;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //await JSRuntime.InvokeAsync<string>("masksHoraServico.mascaraHoraSer", null);
        }
        catch (Exception ex)
        {
            mensagem = "Erro ao carregar a página de cadastro!";
            await JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
        }

    }


    private  async Task Cadastrar()
    {
        mensagem = "";
        try
        {
            mensagem = "Serviço cadastrado com sucesso!";
            servico.ValorSugerido_ser = double.Parse(ValorServico);
            await _servicoController.Salvar(servico);
            JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
        }
        catch (Exception ex)
        {
            //mensagem = endereco.Logradouro;
            mensagem = "Ocorreu um erro inesperado ao tentar salvar o serviço, por favor tente realizar o procedimento novamente! ";
            JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
        }
	}

    void Cancel()
    {
        NavigationManager.NavigateTo("servicos");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeAsync<string>("masksHoraServico.mascaraHoraSer", null);
            }
            catch (Exception ex)
            {
                mensagem = "Erro ao carregar as máscaras " + ex.Message;
                //await JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
            }

        }
    }

    private void fecharModal(string elementoID)
    {
        servico = new Servico();
        JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", elementoID);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }
}



<!--Código responsável por exibir o modal de confirmação de cadastro ou de erro.-->

<div class="modal fade show" id="myModal" style="display:none; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cadastro!</h5>
            </div>
            <div class="modal-body">
                <p>@mensagem</p>
            </div>
            <div class="modal-footer">
                <a href="servicos"><button type="button" class="btn btn-primary">Voltar a lista</button></a>
                <button type="button" class="btn btn-primary" @onclick='eventArgs=>fecharModal("myModal")'>Novo</button>
            </div>
        </div>
    </div>
</div>