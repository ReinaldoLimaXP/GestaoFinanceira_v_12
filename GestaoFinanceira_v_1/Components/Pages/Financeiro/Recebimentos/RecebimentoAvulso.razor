@using GestaoFinanceira_v_1.Data
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IWebHostEnvironment env
@rendermode InteractiveServer
@inject RecebimentoController _recebimentoController
@inject DispositivoController _dispositivoController
@inject CaixaController _caixaController
@inject PlanoContasController _planoController
@inject EncargoController _encargoController
@inject HttpClient http

<div class="modal fade show" id="modalAvulso" style="background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">      
            <div class="modal-header" style="background-color: #898686;">
                <h4 class="modal-title text-white">
                    <strong>
                        &nbsp   &nbsp  Gerar Recebimento Avulso
                    </strong>                    
                </h4>
                <button type="button" @onclick='eventArgs=>EscolharModal(false)' class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>                
            </div>
               
            <div class="modal-body">
                <EditForm Model="recebAvulso" OnValidSubmit="@Receber">
                    <strong>Dados do Recebimento</strong>
                    <hr class="hrsemEspaco" />
                    <div class="input-group col-md-12">
                        <div class="form-group col-md-2">
                            <label>Data: </label>
                            <InputDate disabled id="dataVenda" @bind-Value="recebAvulso.DataVencimento" class="form-control form-control" />
                        </div>
                        &nbsp  &nbsp &nbsp &nbsp
                        <div class="form-group col-md-3">
                            <label>Hora</label>
                            <InputText disabled id="hora" class="form-control form-control" @bind-Value="Hora" />
                        </div>
                        <div class="form-group col-md-1">
                        </div>
                        &nbsp   &nbsp  &nbsp  &nbsp   &nbsp
                        <div class="form-group col-md-4">
                            <label>Caixa: </label>
                            <InputSelect required id="vinculo" @bind-Value="recebAvulso.Fk_id_caixa" class="form-select">
                                @if (recebAvulso.TipoPagamento?.ToLower() != "dinheiro")
                                {
                                    <option value="">Selecionar</option>
                                    @if (caixasAbertoBanco != null)
                                    {
                                        @foreach (Caixa cx in caixasAbertoBanco)
                                        {
                                            <option value="@cx.Id_caixa"> @cx.Id_caixa - @cx.BancoCaixa?.Descricao</option>
                                        }
                                    }
                                }
                                else
                                {
                                    if (caixaOperacional.Id_caixa > 0)
                                    {
                                        CaixaOperacional();
                                        <option value="@caixaOperacional.Id_caixa"> @caixaOperacional.Id_caixa - @caixaOperacional.Tipo</option>
                                    }
                                    else
                                    {
                                        <option value="">Selecionar</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                    
                    <br />
                    <div class="input-group col-md-12">
                        <div class="form-group col-md-2">
                            <label>Valor: *</label>
                            <InputText required onkeyup="moedaFormat(this);" id="valorEstimado" placeholder=" Ex. R$ 100,00"
                                       @bind-Value="ValorParcela" class="form-control" @onblur="SelecionarDispositivo"/>
                        </div>
                        &nbsp   &nbsp  &nbsp &nbsp
                        <div class="form-group col-md-4">
                            <label>Descrição: *</label>
                            <InputText required id="valoraliquota" @bind-Value="recebAvulso.Descricao" class="form-control" />
                        </div>
                        &nbsp   &nbsp  &nbsp &nbsp
                        <div class="form-group col-md-4">
                            <label>Plano de Contas: *</label>
                            <InputSelect required id="vinculo" @bind-Value="recebAvulso.Fk_id_plano" class="form-select">
                                    <option value="">Selecionar</option>
                                    @foreach (PlanoDeContas p in ListPlanos)
                                    {
                                        <option value="@p.Id_planoConta">@p.Codigo  &nbsp @p.Descricao</option>
                                    }
                            </InputSelect>
                        </div>
                    </div>
                    <br />

                    <div class="input-group col-md-12">
                        <div class=" form-group col-md-3">
                        <label><strong>Forma de Recebimento *</strong></label>
                        
                        </div>
                    </div>
                    <div class="input-group col-md-12">
                        <InputRadioGroup required Name="tipopag" @bind-Value="recebAvulso.TipoPagamento">
                            <div class=" form-group col-md-2">
                                <InputRadio class="form-check-input cursorpointer" id="@Tipopag[0]" Value="Tipopag[0]" @onblur="eventArgs=>SelecionarDispositivo()" />
                                <label class="cursorpointer" for="@Tipopag[0]">@Tipopag[0]</label>
                            </div>
                            <div class=" form-group col-md-2">
                                <InputRadio class="form-check-input cursorpointer" id="@Tipopag[1]" Value="Tipopag[1]" @onblur="eventArgs=>SelecionarDispositivo()" />
                                <label class="cursorpointer" for="@Tipopag[1]">@Tipopag[1]</label>
                            </div>
                            <div class=" form-group col-md-3">
                                <InputRadio class="form-check-input cursorpointer" id="@Tipopag[2]" Value="Tipopag[2]" @onblur="eventArgs=>SelecionarDispositivo()" />
                                <label class="cursorpointer" for="@Tipopag[2]">@Tipopag[2]</label>
                            </div>
                            <div class=" form-group col-md-4">
                                <InputRadio class="form-check-input cursorpointer" id="@Tipopag[3]" Value="Tipopag[3]" @onblur="eventArgs=>SelecionarDispositivo()" />
                                <label class="cursorpointer" for="@Tipopag[3]">@Tipopag[3]</label>
                            </div>
                        </InputRadioGroup>
                    </div>
                   <br />
                    <div class="input-group col-md-12">
                        <div class="form-group col-md-5">
                            <strong>Observações</strong>
                            <hr/>
                        </div>
                        &nbsp   &nbsp  &nbsp &nbsp
                        <div class="form-group col-md-5">
                            <strong>Encargos Bancários</strong>
                            <hr/>
                        </div>
                    </div>
                    <div class="input-group col-md-12">
                        <div class="form-group col-md-5">
                            <InputTextArea @bind-Value="recebAvulso.Observacao" rows="4" Cols="35"></InputTextArea>
                        </div>
                        &nbsp &nbsp
                        <div class="form-group col-md-3">
                            <label>Tipo/Dispositivo:</label>
                            @if (recebAvulso.TipoPagamento == "Cartão Débito")
                            {
                                <InputSelect required @onclick="SelecionarDispositivo" id="vinculo" @bind-Value="Id_dispositivoSelecionado" class="form-select">
                                    <option value="0">Selecionar</option>
                                    @if (ListDispositivos != null)
                                    {
                                        @foreach (Dispositivo dis in ListDispositivos)
                                        {
                                            <option value="@dis.Id_dispositivo"> @dis.Descricao</option>
                                        }
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <InputSelect disabled @onclick="SelecionarDispositivo" id="vinculo" @bind-Value="Id_dispositivoSelecionado" class="form-select">
                                    <option value="0">Selecionar</option>
                                    
                                </InputSelect>
                            }
                            <br />
                            <button type="button" @onclick='eventArgs=>EscolharModal(false)' class="btn btn-danger">
                                Voltar &nbsp <i class="bi bi-arrow-left-circle"></i>
                            </button>
                        </div>
                        &nbsp &nbsp
                        <div class="form-group col-md-1">
                            <label>Alíquota:</label>
                            <InputNumber disabled id="porcentagemaliquota" @bind-Value="DispositoReceb.Alicota" class="form-control" />
                        </div>
                        &nbsp &nbsp

                        <div class="form-group col-md-2">
                            <label>Valor:</label>
                            @if (recebAvulso.TipoPagamento == "Cartão Débito")
                            {
                                <InputText  id="valoraliquota" @bind-Value="ValorAlicotaParcela" class="form-control" />
                            }
                            else
                            {
                                <InputText disabled id="valoraliquota" @bind-Value="ValorAlicotaParcela" class="form-control" />
                            }
                            <br />

                            <button type="submit" style="float:right" class="btn btn-success">
                                Receber &nbsp <img src="imagens/sistema/icon _dollar_.png" width="10px"/>
                            </button>

                        </div>

                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> UserChouse { get; set; }
    Recebimento recebAvulso = new Recebimento
    {
        CaixaRecebimento = new Caixa(),
        DispositivoRec = new Dispositivo(),
        Plano = new PlanoDeContas()
    };
    private Caixa caixaRecebimento = new Caixa();
    private List<string> Tipopag { get; set; } = new List<string> {
        "Dinheiro","Pix","Cartão Débito","Transferência TED/DOC"};
    List<Dispositivo> ListDispositivos = new List<Dispositivo>();
    List<PlanoDeContas> ListPlanos = new List<PlanoDeContas>();
    private int Id_dispositivoSelecionado = 0;
    string ValorAlicotaParcela = "R$ 0.00", ValorParcela = "0,00", Hora = DateTime.Now.Hour + ":" + DateTime.Now.Minute;


    //Irá receber todos os caixas aberto do tipo banco do usuário logado
    List<Caixa> caixasAbertoBanco = new List<Caixa>();

    //irá controlar o caixa operacional aberto do usuário
    Caixa caixaOperacional = new Caixa();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                 "import", "/script/modal.js");
                ListDispositivos = _dispositivoController.ListarTodosAtivo();     
            }
            catch (Exception ex)
            {
                // mensagem = "Erro ao carregar as máscaras " + ex.Message;
                //await JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
            }

        }
    }


    public async Task ShowModalRecebimento(int? id_empresa, ApplicationUser usuario)
    {
        try
        {            
            recebAvulso = new Recebimento();
            recebAvulso.Fk_id_empresa = id_empresa;

            recebAvulso.TipoPagamento = "Dinheiro";

            //recebAvulso.CaixaRecebimento = caixa;

            caixasAbertoBanco = await _caixaController.ListarUsuario(usuario.Id_funcionario);
            caixasAbertoBanco = caixasAbertoBanco.Where(x => x.Status.Equals("aberto", StringComparison.InvariantCultureIgnoreCase)
                && x.Tipo.Equals("banco", StringComparison.InvariantCultureIgnoreCase)).ToList();

            caixaOperacional = await _caixaController.BuscarOperacionalAbertoFuncionario(usuario.Id_funcionario);


            recebAvulso.HoraPagamento = DateTime.Now.TimeOfDay;
            recebAvulso.DataVencimento = DateOnly.FromDateTime(DateTime.Now);
            ListPlanos = _planoController.ListarPlanos().Where(x => x.NaturezaConta.ToLower() == "crédito").ToList();
            ListDispositivos = _dispositivoController.ListarTodosAtivo();
            await JSRuntime.InvokeAsync<string>("modal.showModal", "modalAvulso");
        }catch(Exception ex)
        {
            statusMensagem.ShowModal("Erro!", ex.Message);
        }

    }

    public void EscolharModal(bool valor)
    {
        try
        {
            JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", "modalAvulso");
            UserChouse.InvokeAsync(valor);            
        }
        catch(Exception ex)
        {
        }
    }

    public void CaixaOperacional()
    {
        recebAvulso.Fk_id_caixa = caixaOperacional.Id_caixa;
    }

    //Ver o que está causando a não aparecimento da mensagem de confirmação
    public async Task Receber()
    {
        try
        {
            recebAvulso.StatusRecebimento = "Fechado";
            recebAvulso.Nparcela = 1;
            if(Id_dispositivoSelecionado > 0)
            {
                 recebAvulso.Fk_id_dispositivo_rec = Id_dispositivoSelecionado;
            }           
            recebAvulso.AliquotaParcela = ValorAlicotaParcela.Replace("R","").Replace("$","");
            recebAvulso.ValorParcela = double.Parse(ValorParcela);
            recebAvulso.DataPagamento = DateOnly.FromDateTime(DateTime.Now);
            await _recebimentoController.ReceberAvulso(recebAvulso);
            EscolharModal(true);
        }catch(Exception ex)
        {
            await JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", "modalAvulso");
            //throw new Exception(ex.Message);
            Console.WriteLine(ex.Message); // Log da exceção
            //Console.WriteLine("Erro ao receber o valor da parcela " + ex.Message);
            await statusMensagem.ShowModalAwait("Erro", "Erro ao receber o valor da parcela "+ex.Message);
        }
    }

    Dispositivo DispositoReceb = new Dispositivo();
    private void SelecionarDispositivo()
    {
        if (Id_dispositivoSelecionado > 0 && recebAvulso.TipoPagamento == "Cartão Débito")
        {
            /*
            DispositoReceb = ListDispositivos.FirstOrDefault(x => x.Id_dispositivo == Id_dispositivoSelecionado);
            DispositoReceb.Alicota = Math.Round(DispositoReceb.Alicota, 2);
            recebAvulso.AliquotaParcela = (DispositoReceb.Alicota * recebAvulso.ValorParcela / 100).ToString();
            ValorAlicotaParcela = "R$ "+recebAvulso.AliquotaParcela;*/
            try
            {
                DispositoReceb = ListDispositivos.FirstOrDefault(x => x.Id_dispositivo == Id_dispositivoSelecionado);
                DispositoReceb.Alicota = Math.Round(DispositoReceb.Alicota, 2);
                recebAvulso.AliquotaParcela = (DispositoReceb.Alicota * double.Parse(ValorParcela) / 100).ToString("F2");
                ValorAlicotaParcela = "R$ " + recebAvulso.AliquotaParcela;
            }catch(Exception ex){}
        
        }
        else
        {
            DispositoReceb = new Dispositivo();
            ValorAlicotaParcela = "R$ 0.00";
            Id_dispositivoSelecionado = 0;
        }
    }

    private IJSObjectReference? jsModule;
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }

    protected StatusMensagem statusMensagem = new StatusMensagem();
    protected void ConfirmarMensagem(bool confirm) { }
}
<StatusMensagem @ref="statusMensagem" UserChouse="ConfirmarMensagem" />


