@page "/clientes"
@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject ClientesController _clienteController
@inject ClientePFsController _clientePFController;
@inject ClientePJsController _clientePJCotroller;
@rendermode InteractiveServer
@attribute [Authorize]


<PageTitle>Clientes</PageTitle>

<h1><b>Consultar de Clientes</b></h1>
<hr />

<p>Consulte um cliente cadastrado no sistema e utilize as opções disponíveis</p>

<div class="input-group col-md-12">
        <div class="form-group col-md-7">
            <label> Texto de busca </label>
            <InputText @bind-Value="busca" id="idBusca" class="form-control" @onkeydown="@Enter" @onkeyup="@Enter" 
            @onkeypress="@Enter"  @key="@Enter"/>
         </div>
         &nbsp   &nbsp  &nbsp  
         <div class="form-group col-md-2">
            <label> Filtro </label>
        <InputSelect @bind-Value="filtro" class="form-select">
                <!--Testar o contexto dos estados aqui-->
                <option value="zerar">--Selecionar--</option>
                <option value="nome">Nome</option>
                <option value="cpf">CPF/CNPJ</option>
                <option value="email">E-mail</option>
                <option value="telefone">Telefone</option>
            <!--Preencher do banco posteriormente-->
            </InputSelect>
         </div>
        &nbsp   &nbsp &nbsp  
        <div class="form-group col-md-1">
        <br />
        <button style="z-index:0;" class="btn btn-secondary" @onclick='() => Filtrar()'>
            &nbsp <i class="btn-ordem bi bi-search"></i>  &nbsp
        </button>
        </div>
    
        <div class="form-group col-md-1">
        <br />

        <button style="z-index:0;" class="btn-ordem btn btn-primary" @onclick='eventArgs=>showModal("modalCad")' data-toggle="modal" data-target="#modalCad">
                Novo <i class="bi bi-plus-circle"></i>
            </button>
       
        </div>
     </div>

<br />

 
@if ((clientesLista == null || clientesLista.Count <= 0) && busca == "")
{
    <p><em>Carregando os clientes...</em></p>
    <p><em>@mensagemErro</em></p>
}
else
{
    <!--table table-striped table-bordered table-sm-->
    <table class="table table-sm table-responsive-sm">
            <thead>
                <tr>
                    <th>Tipo</th>
                    <th>Nome</th>
                    <th>CPF</th>
                    <th>Genêro</th>
                    <th>Celular</th>
                    <th>Email</th>
                    <th>Opções</th>
                </tr>
            </thead>
            <tbody>
            @foreach (Cliente c in clientesLista)
            {
                <tr>
                    @if(c is ClientePF)
                    {
                        ClientePF pf = c as ClientePF;
                        <td>PF</td>
                        <td>@pf.Nome_cli</td>
                        <td>@pf.Cpf_cli</td>
                        <td>@pf.Sexo_PF</td>
                        <td>@pf.Celular </td>
                        <td>@pf.Email_pessoal </td>
                    }else if(c is ClientePJ)
                    {
                        ClientePJ pj = c as ClientePJ;
                        <td>PJ</td>
                        <td>@pj.NomeFantasia_PJ </td>
                        <td>@pj.CNPJ_PJ</td>
                        <td>--</td>
                        <td>@pj.Celular </td>
                        <td>@pj.Email_pessoal </td>
                    }
                            
                            <td>
                                <td>
                                    <button class="btn-ordem btn-olho btn" @onclick='() => Opcao(c,"imprimir")'>
                                        <i class="bi bi-eye-fill"></i>
                                    </button>
                                </td>
                                <td>
                                    <button class="btn-ordem btn btn-primary" @onclick='() => Opcao(c,"editar")'> 
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                </td>
                                <td>
                                    <button class="btn-ordem btn btn-danger" @onclick='() => Exibirmodal(c.Id_cliente,"exampleModal")'>
                                        <i class="bi bi-trash3-fill"></i>
                                    </button>
                                </td>
                            </td>
                    <!--
                            <i class="fa fa-eye" style="color: #006400; cursor: pointer;" @onclick='() => Opcao(c,"imprimir")'></i>
                                                            
                            <i class="bi bi-pencil" style="color: #0000FF; cursor: pointer;" @onclick='() => Opcao(c,"editar")'></i>
                            
                            <i class="fa fa-trash" style="color: #d7370f; cursor: pointer;" @onclick='() => Exibirmodal(c.Id_cliente,"exampleModal")'></i>
                             -->
                            
                       </tr>
            }
            </tbody>
        </table>
}

@code {


    List<ClientePF> clientesPFLista { get; set; } = new List<ClientePF>();
    List<ClientePJ> clientesPJLista { get; set; } =  new List<ClientePJ>();
    List<Cliente> clientesLista { get; set; } =  new List<Cliente>();
    string mensagemErro = "";
    string filtro = "zerar", busca = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clientesPFLista = await _clientePFController.listarTodos();
            clientesPJLista = await _clientePJCotroller.listarTodos();
            clientesLista.AddRange(clientesPFLista);
            clientesLista.AddRange(clientesPJLista);
        }
        catch (Exception ex)
        {
            mensagemErro = "Estamos tendo um problema em lista os clientes, fique tranquilo estamos resolvendo! "+ex.Message;
            //Exibirmodal(12, "exampleModal");
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        this.Filtrar();
    }

    private void CheckChanged()
    {
        this.Filtrar();
    }

    private void Filtrar()
    {
        try
        {
            if(filtro.Length > 0){
                if (filtro == "nome" || filtro == "zerar")
                {
                    //List<ClientePF> clientePFListaI = clientesPFLista.Where(x => x.Nome_cli.ToLower().StartsWith(busca.ToLower())).ToList();
                    //List<ClientePJ> clientePJListaI = clientesPJLista.Where(x => x.NomeFantasia_PJ.ToLower().StartsWith(busca.ToLower())).ToList();

                    List<ClientePF> clientePFListaI = clientesPFLista.Where(x => x.Nome_cli.ToLower().Contains(busca.ToLower())).ToList();
                    List<ClientePJ> clientePJListaI = clientesPJLista.Where(x => x.NomeFantasia_PJ.ToLower().Contains(busca.ToLower())).ToList();
                    clientesLista.Clear();
                    clientesLista.AddRange(clientePFListaI);
                    clientesLista.AddRange(clientePJListaI);
                }
                else if (filtro == "cpf")
                {
                    List<ClientePF> clientePFListaI = clientesPFLista.Where(x => x.Cpf_cli.StartsWith(busca)).ToList();
                    List<ClientePJ> clientePJListaI = clientesPJLista.Where(x => x.CNPJ_PJ.StartsWith(busca)).ToList();
                    clientesLista.Clear();
                    clientesLista.AddRange(clientePFListaI);
                    clientesLista.AddRange(clientePJListaI);
                }
                else if (filtro == "email")
                {
                    List<ClientePF> clientePFListaI = clientesPFLista
                         .Where(x => (x.Email_pessoal != null && x.Email_pessoal.Contains(busca)) ||
                                      (x.Email_profissional != null && x.Email_profissional.Contains(busca)))
                         .ToList();
                    List<ClientePJ> clientePJListaI = clientesPJLista
                        .Where(x => (x.Email_pessoal != null && x.Email_pessoal.Contains(busca)) || 
                        (x.Email_profissional != null && x.Email_profissional.Contains(busca))).ToList();
                    clientesLista.Clear();
                    clientesLista.AddRange(clientePFListaI);
                    clientesLista.AddRange(clientePJListaI);
                }
                else if (filtro == "telefone")
                {
                    List<ClientePF> clientePFListaI = clientesPFLista
                        .Where(x => (x.Celular != null && x.Celular.Contains(busca)) ||
                                     (x.Tel_casa != null && x.Tel_casa.Contains(busca)) ||
                                     (x.Tel_trabalho != null && x.Tel_trabalho.Contains(busca)))
                        .ToList();
                    List<ClientePJ> clientePJListaI = clientesPJLista
                        .Where(x => (x.Tel_casa != null && x.Tel_casa.Contains(busca)) ||
                                     (x.Tel_trabalho != null && x.Tel_trabalho.Contains(busca)))
                        .ToList();
                    clientesLista.Clear();
                    clientesLista.AddRange(clientePFListaI);
                    clientesLista.AddRange(clientePJListaI);
                }
            }
        }catch(Exception ex)
        {
            statusMensagem.ShowModal("Erro", ex.Message);
        }
    }

    Cliente clienteExcluir = new Cliente();
    public async Task Exibirmodal(int id_cliente, string elementoID)
    {
        try
        {
            clienteExcluir = clientesLista.SingleOrDefault(x => x.Id_cliente == id_cliente);
            if(clienteExcluir != null)
            {
               await JSRuntime.InvokeAsync<string>("modal.showModal", elementoID);
            }

        }catch(Exception ex)
        {
            //await JSRuntime.InvokeAsync<string>("modal.showModal", elementoID);
        }
    }

    protected async Task ConfirmarExclusao()
    {
        try
        {
            await _clientePFController.Deletar(clienteExcluir.Id_cliente);
            clientesLista.Remove(clienteExcluir);
            await JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", "exampleModal");
            mensagemErro = "";
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", "exampleModal");
            statusMensagem.ShowModal("Erro", ex.Message);  
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("clientes");
    }

    private void Opcao(Cliente c, string acao)
    {
        if(c is ClientePF)
        {
            if (acao == "editar")
            {
                NavigationManager.NavigateTo("clientes/editar/" + c.Id_cliente);
            }else if(acao == "imprimir"){
                NavigationManager.NavigateTo("clientes/imprimir/" + c.Id_cliente);
            }

        }else if(c is ClientePJ)
        {
            if (acao == "editar")
            {
                NavigationManager.NavigateTo("clientes/editarPJ/" + c.Id_cliente);
            }
            else if (acao == "imprimir")
            {
                NavigationManager.NavigateTo("clientes/imprimirPJ/" + c.Id_cliente);
            }

        }
    }

    private IJSObjectReference module;
    private async void showModal(string elementoID)
    {
        try
        {
            if (module != null)
            {
                await JSRuntime.InvokeAsync<string>("modal.showModal", elementoID);
            }
            else
            {
                //module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "script/modal.js");
                await JSRuntime.InvokeAsync<string>("modal.showModal", elementoID);
            }
        }catch(Exception ex)
        {
            
        }
    }

    private async void fecharModal(string elementoID)
    {
        try
        {
            await JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", elementoID);
        }catch(Exception ex)
        {
            
        }
        
    }

    private IJSObjectReference? jsModule;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "/script/modal.js");
            }
            catch (Exception ex)
            {
               // mensagem = "Erro ao carregar as máscaras " + ex.Message;
                //await JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }

    protected StatusMensagem statusMensagem = new StatusMensagem();
    protected void ConfirmarMensagem(bool confirm) { }
}

<StatusMensagem @ref="statusMensagem" UserChouse="ConfirmarMensagem" />

    <div class="modal fade show" id="exampleModal" style="background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Excluir!</h5>
                    <button type="button" @onclick='eventArgs=>fecharModal("exampleModal")' class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Você tem certeza que deseja excluir o cliente ?</p>
                    <p>@mensagemErro</p>
                </div>
                <div class="modal-footer">
                        <a href="clientes"><button type="button" class="btn btn-danger" @onclick="@ConfirmarExclusao">Sim</button></a>
                    <button type="button" class="btn btn-primary" @onclick='eventArgs=>fecharModal("exampleModal")'>Não</button>
                </div>
            </div>
        </div>
    </div>



<div class="modal fade show" id="modalCad" tabindex="-1" role="dialog" style="background-color: rgba(10,10,10,.8);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cadastro de Cliente</h5>
                <button type="button" @onclick='eventArgs=>fecharModal("modalCad")' class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Qual tipo de cliente você deseja cadastrar?</p>
            </div>
            <div class="modal-footer">
                <a href="/clientes/cadastro">
                    <button type="button" class="btn btn-primary">Pessoa Física</button>
                </a>
                <a href="/clientespj/cadastro">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Pessoa Jurídica</button>
                </a>
            </div>
        </div>
    </div>
</div>
   

       