@page "/clientes/imprimir/{id_cliente:int}"
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment env
@implements IAsyncDisposable
@using Newtonsoft.Json
@inject EstadosController controleEstado
@inject CidadesController controleCidade
@inject ClientePFsController controleClientePF
@rendermode InteractiveServer
@attribute [Authorize]




<h2><b>Cadastro de Clientes</b></h2>
<h4>Cadastre um novo cliente e mantenha seus dados atualizados</h4>

<EditForm Model="@clientePF" OnValidSubmit="@Imprimir">
    <DataAnnotationsValidator />
    <hr/>

     <!--Inicio do div dos forms e da imagem-->
     <div class="input-group">
         <!--Inicio do div dos forms-->
         <div  class="col-md-10">
             <!--Inicio do div dos imputs CPF e nome-->
            <div class="input-group col-md-12">
                <div class="form-group col-md-3">
                <label>CPF: *</label>
                    <!--<div class="col-sm-2">-->
                    <InputText id="cpfCliente" disabled  data-mask="000.000.000-00"  class="form-control" placeholder="000.000.000-00" @bind-Value="clientePF.Cpf_cli" />
                    @if(clientePF.Cpf_cli != null)
                    {
                        @if(clientePF.Cpf_cli.Length >= 14){
                            <ValidationMessage For="()=>clientePF.Cpf_cli"/> 
                        }
                    } 
                </div>
                 &nbsp &nbsp &nbsp  &nbsp
                <div class="form-group col-md-8">
                    <label>Nome: *</label>
                    <InputText type="text" disabled class="form-control" @bind-Value="clientePF.Nome_cli"/>
                </div>
              
            </div><!--Fim do div dos imputs CPF e nome-->
            <br/>
            <!--Inicio do div dos imputs RG, data de nascimento e sexo-->
            <div class="input-group col-md-12">        
                <div class="form-group col-md-3">
                    <label>RG: *</label>
                    <InputText id="rg" disabled @bind-Value="clientePF.Rg_cli" class="form-control"/>
                </div>
                 &nbsp  &nbsp  &nbsp &nbsp
                <div class="form-group col-md-2">
                    <label>Orgão Emissor: *</label>
                    <InputText id="orgaoEmirssor" disabled @bind-Value="clientePF.OrgaoEmissorRG_cli" class="form-control"/>
                </div> 
                &nbsp  &nbsp &nbsp &nbsp
                <div class="form-group col-md-3">
                    <label>Data de Nascimento: </label>
                    <InputDate id="dataNasc" disabled @bind-Value="clientePF.Data_nascimento" class="form-control"/>
                </div>
                &nbsp   &nbsp  &nbsp &nbsp
                <div class="form-group col-md-2">
                    <label>Sexo: </label>
                    <InputSelect @bind-Value="clientePF.Sexo_PF" disabled class="form-select">
                          <option value="">--Selecionar--</option>
                          <option value="Masculino">Masculino</option>
                          <option value="Feminino">Feminino</option>
                    </InputSelect>
                </div>
                
            </div><!--Fim do div dos imputs RG, data de nascimento e sexo-->
        </div><!--Fim do div dos forms-->
        <div>
             <div class="form-group col-md-2">
                <div class="imageContainer">
                    <img id='imgCliente' @onclick="@FotoCarregarr" src="@imagem" width="120px" height="120px"/>
                </div>
                <InputFile type="file" disabled OnChange="LoadFiles" id="fImage" accept="image/png, image/jpeg, image/gif"/>
             </div>
        </div>
    </div><!--Fim do div dos forms e da imagem-->

    <hr/>
     <div class="row">
        <div class="form-group col-md-2">
            <label> CEP: *</label>
            <InputText id="cep"  disabled @bind-Value="clientePF.Cep" class="form-control" />
         </div>

         <div class="form-group col-md-1">
             <br />
            <button  type="button" class="btn btn-secondary"   @onclick='BuscarLocalidade'>
             <i class="bi bi-search"></i>  
            </button>
         </div>
    
         <div class="form-group col-md-6">
            <label> Logradouro: *</label>  
             <InputText id="logradouro" disabled @bind-Value="clientePF.Logradouro" class="form-control"/>
         </div>

         <div class="form-group col-md-3">
            <label> Número: *</label>               
             <InputText id="numero" disabled @bind-Value="clientePF.Numero" class="form-control"/>
         </div>
     </div>
     <br />
    

      <div class="row">
          <div class="form-group col-md-4"> 
              <label>Bairro: *</label>
                <InputText id="bairro" disabled @bind-Value="clientePF.Bairro" class="form-control"/>
           </div>

           <div class="form-group col-md-4">  
               <label> Estado: *</label>
                <InputSelect @bind-Value="id_estadoSelecionado" disabled @onblur="@SelecionarCidades"  class="form-select">
                    <!--Preencher do banco posteriormente-->
                    <option value="0">--Selecionar--</option>
                @if(estadosList == null)
                {

                }
                else
                {
                  @foreach(Estado e in estadosList)
                    {
                        <option value="@e.Id_estado"> @e.Uf_est </option>
                    }  
                }
                
            </InputSelect>
           </div>

           <div class="form-group col-md-4">
                <label> Cidade: </label>
                <InputSelect @bind-Value="id_cidadeSelecionada" disabled class="form-select">
                    <!--Preencher do banco posteriormente-->
                      <option value="0">--Selecionar--</option>
                      @if(cidadesList == null)
                        {
                            <option value="0"> nenhuma cidade </option>
                        }
                        else
                        {
                          @foreach(Cidade cid in cidadesCelecionadas)
                            {
                                <option value="@cid.Id_cidade"> @cid.Nome_cid </option>
                            }  
                        }
                </InputSelect>
           </div>
      </div>
     <hr />
     <div class="row">
          <div class="form-group col-md-4"> 
              <label>Celular: *</label>
                <InputText id="celularTel"  disabled  @bind-Value="clientePF.Celular" class="form-control"/>
           </div>
  
         <div class="form-group col-md-4">
              <label>Trabalho: </label>
              <InputText id="celTrabalho" disabled @bind-Value="clientePF.Tel_trabalho" class="form-control"/>
          </div>

          <div class="form-group col-md-4"> 
               <label>Casa: </label>
              <InputText id="telCasa" disabled @bind-Value="clientePF.Tel_casa" class="form-control"/>
          </div>
     </div>
    <hr />
    <div class="row">
        <div class="form-group col-md-6"> 
            <label>Email Pessoal: </label>
            <InputText type="email" disabled id="emailPessoal" @bind-Value="clientePF.Email_pessoal" class="form-control"/>
        </div>

        <div class="form-group col-md-6">
            <label>Email Profissional: </label>
            <InputText  type="email" id="emailProfissional"  disabled @bind-Value="clientePF.Email_profissional" class="form-control"/>
        </div>
    </div>

     <br />
      <div class="form-group">
           <a href="/clientes">
            <button @onclick="@Cancel" class="btn btn-danger bi bi-searche">
                Voltar &nbsp <i class="bi bi-arrow-left-circle"></i>
            </button>
            </a>
            <!--
            <button type="submit" class="btn btn-success create"> 
                Cadastrar &nbsp <i class="bi bi-file-earmark-pdf"></i>
            </button>
             -->           
      </div>
     <br />
     <br />
</EditForm>




@code {

    [Parameter]
    public int id_cliente { get; set; }


    int id_estadoSelecionado;
    int id_cidadeSelecionada;

    string imagem = "imagensClientes/camera.png";
    IReadOnlyList<IBrowserFile>? arquivoSelecionados = null;
    private ClientePF clientePF = new ClientePF();


    List<Estado> estadosList { get; set; }
    List<Cidade> cidadesList { get; set; }
    List<Cidade> cidadesCelecionadas{ get; set; }


    string mensagem = "";



    protected override async Task OnInitializedAsync()
    {
        try{           
            clientePF = await controleClientePF.BuscarId(id_cliente);
            imagem = clientePF.Foto;
            id_cidadeSelecionada = clientePF.Cidade.Id_cidade;
            id_estadoSelecionado = clientePF.Cidade.Estado.Id_estado;
            //Console.WriteLine("Cidade"+id_cidadeSelecionada);
            //cidadeSelecionada = new Cidade();
            estadosList = await controleEstado.listarTodosawait();
            cidadesList = controleCidade.listarTodos();
            cidadesCelecionadas = cidadesList;
        }catch(Exception ex)
        {
            statusMensagem.ShowModal("Erro", "Erro ao carregar a página de cliente " + ex.Message);
        }

    }

    private async Task SelecionarCidades()
    {
        if(id_estadoSelecionado != 0)
        {
            cidadesCelecionadas =  cidadesList.Where(x => x.Estado.Id_estado == id_estadoSelecionado).ToList();
        }
        else
        {
            cidadesCelecionadas = cidadesList;
        }

    }

    private void Imprimir()
    {

    }

    private static async Task<string> PegaJson()
    {
        try
        {
            HttpClient cliente = new HttpClient();
            HttpResponseMessage resposta = await cliente.GetAsync("https://viacep.com.br/ws/01001000/json/");
            resposta.EnsureSuccessStatusCode();

            return await resposta.Content.ReadAsStringAsync();
        }catch(Exception ex)
        {
            throw new Exception("Erro ao busca o CEP");
        }

    }

    private  async Task BuscarLocalidade()
    {
        try
        {
            string cepp = clientePF.Cep.Replace("-", "");
            Endereco informacoesCep = new Endereco();
            string url = "https://viacep.com.br/ws/" + cepp + "/json";

            using (var cliente = new HttpClient())
            {
                HttpResponseMessage resposta = await cliente.GetAsync(url);
                string json = await resposta.Content.ReadAsStringAsync();
                informacoesCep = JsonConvert.DeserializeObject<Endereco>(json);


                clientePF.Logradouro = informacoesCep.Logradouro;
                clientePF.Bairro = informacoesCep.Bairro;
                Cidade c = cidadesList.FirstOrDefault(x => x.Nome_cid == informacoesCep.Localidade);
                if(c != null)
                {
                    clientePF.Cidade = c;
                    id_cidadeSelecionada = clientePF.Cidade.Id_cidade;
                }
                Estado e = estadosList.FirstOrDefault(x => x.Uf_est == informacoesCep.Uf);
                if(e != null)
                {
                    id_estadoSelecionado = e.Id_estado;
                }
            }  
        }catch(Exception ex)
        {

        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("clientes");
    }

    private void fecharModal(string elementoID)
    {
        clientePF = new ClientePF();
        JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", elementoID);
    }

    private IJSObjectReference? jsModule;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeAsync<string>("masksCPF.mascaraCPF", null);   
                await JSRuntime.InvokeAsync<string>("masksTel.mascaratel", null);
                await JSRuntime.InvokeAsync<string>("masksTelCasa.mascaratelCasa", null);
                await JSRuntime.InvokeAsync<string>("masksTelTra.mascaratelTra", null);
                await JSRuntime.InvokeAsync<string>("masksCep.mascaraCep", null);
            }
            catch(Exception ex)
            {
                mensagem = "Erro ao carregar as máscaras "+ex.Message;
                //await JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
            }

        }
    }



    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        arquivoSelecionados = e.GetMultipleFiles();
        try
        {
            foreach (var file in arquivoSelecionados)
            {
                if(clientePF.Cpf_cli != null)
                {
                    long maxFileSize = 1024 * 1024 * 2000;
                    Stream stream = file.OpenReadStream(maxFileSize);
                    var extensao = Path.GetExtension(file.Name);
                    var path = $"{env.WebRootPath}\\imagensClientes\\{clientePF.Cpf_cli}{extensao}";
                    FileStream fs = File.Create(path);
                    await stream.CopyToAsync(fs);
                    imagem = $"imagensClientes/{clientePF.Cpf_cli}{extensao}";
                    stream.Close();
                    fs.Close();

                }
            }
        }
        catch (Exception ex)
        {
            imagem = ex.Message;
        }

    }

    private async void FotoCarregarr()
    {
        try
        {
            if(clientePF.Cpf_cli != null)
            {
                await JSRuntime.InvokeAsync<string>("uploadImg.fotoCarregar", null);
            }
            else
            {            
                await JSRuntime.InvokeAsync<string>("focos.focusById", "cpfCliente");
            } 
        }catch(Exception ex)
        { }
               
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }

    protected StatusMensagem statusMensagem = new StatusMensagem();
    protected void ConfirmarMensagem(bool confirm) { }
}
<StatusMensagem @ref="statusMensagem" UserChouse="ConfirmarMensagem" />
<!--Código responsável por exibir o modal de confirmação de cadastro ou de erro.-->

<div class="modal fade show" id="myModal" style="display:none; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
<div class="modal-dialog" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Cadastro!</h5>
        </div>
        <div class="modal-body">
                <p>@mensagem</p>
        </div>
        <div class="modal-footer">
                <a href="clientes"><button type="button" class="btn btn-primary">Voltar a lista</button></a>
                <button type="button" class="btn btn-primary" @onclick='eventArgs=>fecharModal("myModal")'>Novo</button>
        </div>
    </div>
</div>
</div>
