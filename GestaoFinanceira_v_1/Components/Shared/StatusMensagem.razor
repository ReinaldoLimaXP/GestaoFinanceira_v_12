<!--Esse componente é utilizado para mensagem de erro e mensagem de sucesso-->
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IWebHostEnvironment env
@rendermode InteractiveServer

<div class="modal fade show"  id="modalStatus" style="background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Titulo</h5>
                <button type="button"  class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    @ShowMensagem
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="FecharModal">Ok</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Titulo { get; set; }
    [Parameter]
    public string? ShowMensagem { get; set; }

    [Parameter]
    public EventCallback<bool> UserChouse { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                 "import", "/script/modal.js");
            }
            catch (Exception ex)
            {
                // mensagem = "Erro ao carregar as máscaras " + ex.Message;
                //await JSRuntime.InvokeAsync<string>("modal.showModal", "myModal");
            }

        }
    }

    public void ShowModal(string titulo, string mensagem)
    {
        try
        {
            Titulo = titulo;
            ShowMensagem = mensagem;
            JSRuntime.InvokeAsync<string>("modal.showModal", "modalStatus");
        }catch(Exception ex)
        {

        }

    }

    public async Task ShowModalAwait(string titulo, string mensagem)
    {
        try
        {
            Titulo = titulo;
            ShowMensagem = mensagem;
            await JSRuntime.InvokeAsync<string>("modal.showModal", "modalStatus");
        }catch(Exception ex)
        {

        }
    }

    public async void FecharModal()
    {
        try
        {
            await JSRuntime.InvokeAsync<string>("modalFechar.fecharModal", "modalStatus");
            await UserChouse.InvokeAsync(true);
        }catch(Exception ex)
        {
            
        }
    }
    private IJSObjectReference? jsModule;
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }
}
